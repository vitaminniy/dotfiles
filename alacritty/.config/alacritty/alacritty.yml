env:
  TERM: xterm-256color

window:
  decorations: full
  startup_mode: Fullscreen
  title: Alacritty

scrolling:
  history: 100000

font:
  # Normal (roman) font face
  #normal:
    # Font family
    #
    # Default:
    #   - (macOS) Menlo
    #   - (Linux) monospace
    #   - (Windows) Consolas
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Regular

  # Bold font face
  #bold:
    # Font family
    #
    # If the bold family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Bold

  # Italic font face
  #italic:
    # Font family
    #
    # If the italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Italic

  # Bold italic font face
  #bold_italic:
    # Font family
    #
    # If the bold italic family is not specified, it will fall back to the
    # value specified for the normal font.
    #family: monospace

    # The `style` can be specified to pick a specific face.
    #style: Bold Italic

  # Point size
  size: 14.0

# If `true`, bold text is drawn using the bright color variants.
#draw_bold_text_with_bright_colors: true

# Colors (Tomorrow Night Bright)
#colors:
  # Default colors
  #primary:
  #  background: '0x000000'
  #  foreground: '0xeaeaea'

    # Bright and dim foreground colors
    #
    # The dimmed foreground color is calculated automatically if it is not present.
    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`
    # is `false`, the normal foreground color will be used.
    #dim_foreground: '0x9a9a9a'
    #bright_foreground: '0xffffff'

  # Cursor colors
  #
  # Colors which should be used to draw the terminal cursor. If these are unset,
  # the cursor color will be the inverse of the cell color.
  #cursor:
  #  text: '0x000000'
  #  cursor: '0xffffff'

  # Selection colors
  #
  # Colors which should be used to draw the selection area. If selection
  # background is unset, selection color will be the inverse of the cell colors.
  # If only text is unset the cell text color will remain the same.
  #selection:
  #  text: '0xeaeaea'
  #  background: '0x404040'

  # Normal colors
  #normal:
  #  black:   '0x000000'
  #  red:     '0xd54e53'
  #  green:   '0xb9ca4a'
  #  yellow:  '0xe6c547'
  #  blue:    '0x7aa6da'
  #  magenta: '0xc397d8'
  #  cyan:    '0x70c0ba'
  #  white:   '0xeaeaea'

  # Bright colors
  #bright:
  #  black:   '0x666666'
  #  red:     '0xff3334'
  #  green:   '0x9ec400'
  #  yellow:  '0xe7c547'
  #  blue:    '0x7aa6da'
  #  magenta: '0xb77ee0'
  #  cyan:    '0x54ced6'
  #  white:   '0xffffff'

  # Dim colors
  #
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  #dim:
  #  black:   '0x000000'
  #  red:     '0x8c3336'
  #  green:   '0x7a8530'
  #  yellow:  '0x97822e'
  #  blue:    '0x506d8f'
  #  magenta: '0x80638e'
  #  cyan:    '0x497e7a'
  #  white:   '0x9a9a9a'

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '0xff00ff' }`
  #
  #indexed_colors: []

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
#  animation: EaseOutExpo
  duration: 0
#  color: '0xffffff'

window.dynamic_title: true

cursor:
  style: Block
  unfocused_hollow: true

live_config_reload: true

shell:
  program: /bin/zsh
  args:
    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#working_directory: None

# Windows 10 ConPTY backend (Windows only)
#
# This will enable better color support and may resolve other issues,
# however this API and its implementation is still young and so is
# disabled by default, as stability may not be as good as the winpty
# backend.
#
# Alacritty will fall back to the WinPTY automatically if the ConPTY
# backend cannot be initialized.
#enable_experimental_conpty_backend: false

# Send ESC (\x1b) before characters when alt is pressed.
#alt_send_esc: true

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false

  # Record all characters and escape sequences as test data.
  #ref_test: false

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Middle, action: PasteSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
key_bindings:
  # (Windows/Linux only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  - { key: Key0,      mods: Command,         action: ResetFontSize    }
  - { key: Plus,      mods: Command,         action: IncreaseFontSize }
  - { key: Minus,     mods: Command,         action: DecreaseFontSize }
  - { key: V,         mods: Command,         action: Paste            }
  - { key: C,         mods: Command,         action: Copy             }
  - { key: H,         mods: Command,         action: Hide             }
  - { key: F,         mods: Command|Control, action: ToggleFullscreen }
  # (macOS emacs)
  - { key: A,         mods: Alt,       chars: "\x1ba"                 }
  - { key: B,         mods: Alt,       chars: "\x1bb"                 }
  - { key: C,         mods: Alt,       chars: "\x1bc"                 }
  - { key: D,         mods: Alt,       chars: "\x1bd"                 }
  - { key: E,         mods: Alt,       chars: "\x1be"                 }
  - { key: F,         mods: Alt,       chars: "\x1bf"                 }
  - { key: G,         mods: Alt,       chars: "\x1bg"                 }
  - { key: H,         mods: Alt,       chars: "\x1bh"                 }
  - { key: I,         mods: Alt,       chars: "\x1bi"                 }
  - { key: J,         mods: Alt,       chars: "\x1bj"                 }
  - { key: K,         mods: Alt,       chars: "\x1bk"                 }
  - { key: L,         mods: Alt,       chars: "\x1bl"                 }
  - { key: M,         mods: Alt,       chars: "\x1bm"                 }
  - { key: N,         mods: Alt,       chars: "\x1bn"                 }
  - { key: O,         mods: Alt,       chars: "\x1bo"                 }
  - { key: P,         mods: Alt,       chars: "\x1bp"                 }
  - { key: Q,         mods: Alt,       chars: "\x1bq"                 }
  - { key: R,         mods: Alt,       chars: "\x1br"                 }
  - { key: S,         mods: Alt,       chars: "\x1bs"                 }
  - { key: T,         mods: Alt,       chars: "\x1bt"                 }
  - { key: U,         mods: Alt,       chars: "\x1bu"                 }
  - { key: V,         mods: Alt,       chars: "\x1bv"                 }
  - { key: W,         mods: Alt,       chars: "\x1bw"                 }
  - { key: X,         mods: Alt,       chars: "\x1bx"                 }
  - { key: Y,         mods: Alt,       chars: "\x1by"                 }
  - { key: Z,         mods: Alt,       chars: "\x1bz"                 }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"                 }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"                 }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"                 }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"                 }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"                 }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"                 }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"                 }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"                 }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"                 }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                 }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"                 }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"                 }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"                 }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"                 }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"                 }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"                 }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                 }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"                 }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"                 }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"                 }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"                 }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"                 }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"                 }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"                 }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                 }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                 }
  - { key: Key1,      mods: Alt,       chars: "\x1b1"                 }
  - { key: Key2,      mods: Alt,       chars: "\x1b2"                 }
  - { key: Key3,      mods: Alt,       chars: "\x1b3"                 }
  - { key: Key4,      mods: Alt,       chars: "\x1b4"                 }
  - { key: Key5,      mods: Alt,       chars: "\x1b5"                 }
  - { key: Key6,      mods: Alt,       chars: "\x1b6"                 }
  - { key: Key7,      mods: Alt,       chars: "\x1b7"                 }
  - { key: Key8,      mods: Alt,       chars: "\x1b8"                 }
  - { key: Key9,      mods: Alt,       chars: "\x1b9"                 }
  - { key: Key0,      mods: Alt,       chars: "\x1b0"                 }
  - { key: Space,     mods: Control,   chars: "\x00"                  } # Ctrl + Space
  - { key: Grave,     mods: Alt,       chars: "\x1b`"                 } # Alt + `
  - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                 } # Alt + ~
  - { key: Period,    mods: Alt,       chars: "\x1b."                 } # Alt + .
  - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                 } # Alt + *
  - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                 } # Alt + #
  - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                 } # Alt + >
  - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                 } # Alt + <
  - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                 } # Alt + _
  - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                 } # Alt + %
  - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                 } # Alt + ^
  - { key: Backslash, mods: Alt,       chars: "\x1b\\"                } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                 } # Alt + |

  #- { key: Paste,                    action: Paste                            }
  #- { key: Copy,                     action: Copy                             }
  #- { key: L,         mods: Control, action: ClearLogNotice                   }
  #- { key: L,         mods: Control, chars: "\x0c"                            }
  #- { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  #- { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  #- { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt       }
  #- { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt       }
